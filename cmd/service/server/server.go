// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/labstack/echo/v4"
)

// Defines values for CarpoolBookingStatus.
const (
	CarpoolBookingStatusCANCELLED                  CarpoolBookingStatus = "CANCELLED"
	CarpoolBookingStatusCOMPLETEDPENDINGVALIDATION CarpoolBookingStatus = "COMPLETED_PENDING_VALIDATION"
	CarpoolBookingStatusCONFIRMED                  CarpoolBookingStatus = "CONFIRMED"
	CarpoolBookingStatusVALIDATED                  CarpoolBookingStatus = "VALIDATED"
	CarpoolBookingStatusWAITINGCONFIRMATION        CarpoolBookingStatus = "WAITING_CONFIRMATION"
)

// Defines values for DriverCarpoolBookingStatus.
const (
	DriverCarpoolBookingStatusCANCELLED                  DriverCarpoolBookingStatus = "CANCELLED"
	DriverCarpoolBookingStatusCOMPLETEDPENDINGVALIDATION DriverCarpoolBookingStatus = "COMPLETED_PENDING_VALIDATION"
	DriverCarpoolBookingStatusCONFIRMED                  DriverCarpoolBookingStatus = "CONFIRMED"
	DriverCarpoolBookingStatusVALIDATED                  DriverCarpoolBookingStatus = "VALIDATED"
	DriverCarpoolBookingStatusWAITINGCONFIRMATION        DriverCarpoolBookingStatus = "WAITING_CONFIRMATION"
)

// Defines values for DriverJourneyType.
const (
	DriverJourneyTypeDYNAMIC DriverJourneyType = "DYNAMIC"
	DriverJourneyTypeLINE    DriverJourneyType = "LINE"
	DriverJourneyTypePLANNED DriverJourneyType = "PLANNED"
)

// Defines values for JourneyScheduleType.
const (
	JourneyScheduleTypeDYNAMIC JourneyScheduleType = "DYNAMIC"
	JourneyScheduleTypeLINE    JourneyScheduleType = "LINE"
	JourneyScheduleTypePLANNED JourneyScheduleType = "PLANNED"
)

// Defines values for PassengerCarpoolBookingStatus.
const (
	PassengerCarpoolBookingStatusCANCELLED                  PassengerCarpoolBookingStatus = "CANCELLED"
	PassengerCarpoolBookingStatusCOMPLETEDPENDINGVALIDATION PassengerCarpoolBookingStatus = "COMPLETED_PENDING_VALIDATION"
	PassengerCarpoolBookingStatusCONFIRMED                  PassengerCarpoolBookingStatus = "CONFIRMED"
	PassengerCarpoolBookingStatusVALIDATED                  PassengerCarpoolBookingStatus = "VALIDATED"
	PassengerCarpoolBookingStatusWAITINGCONFIRMATION        PassengerCarpoolBookingStatus = "WAITING_CONFIRMATION"
)

// Defines values for PassengerJourneyType.
const (
	DYNAMIC PassengerJourneyType = "DYNAMIC"
	LINE    PassengerJourneyType = "LINE"
	PLANNED PassengerJourneyType = "PLANNED"
)

// Defines values for PriceType.
const (
	FREE    PriceType = "FREE"
	PAYING  PriceType = "PAYING"
	UNKNOWN PriceType = "UNKNOWN"
)

// Defines values for SchedulePassengerPickupDay.
const (
	FRI SchedulePassengerPickupDay = "FRI"
	MON SchedulePassengerPickupDay = "MON"
	SAT SchedulePassengerPickupDay = "SAT"
	SUN SchedulePassengerPickupDay = "SUN"
	THU SchedulePassengerPickupDay = "THU"
	TUE SchedulePassengerPickupDay = "TUE"
	WED SchedulePassengerPickupDay = "WED"
)

// Defines values for UserGender.
const (
	F UserGender = "F"
	M UserGender = "M"
	O UserGender = "O"
)

// Defines values for BookingStatus.
const (
	BookingStatusCANCELLED                  BookingStatus = "CANCELLED"
	BookingStatusCOMPLETEDPENDINGVALIDATION BookingStatus = "COMPLETED_PENDING_VALIDATION"
	BookingStatusCONFIRMED                  BookingStatus = "CONFIRMED"
	BookingStatusVALIDATED                  BookingStatus = "VALIDATED"
	BookingStatusWAITINGCONFIRMATION        BookingStatus = "WAITING_CONFIRMATION"
)

// Booking defines model for Booking.
type Booking struct {
	Car *Car `json:"car,omitempty"`

	// Carpooling distance in meters.
	Distance *int `json:"distance,omitempty"`
	Driver   User `json:"driver"`

	// ID of the Driver's journey to which the booking is related (if any). Unique given the `User`'s `operator` property.
	DriverJourneyId *string `json:"driverJourneyId,omitempty"`

	// Carpooling duration in seconds.
	Duration *int `json:"duration,omitempty"`

	// Booking id is common between both operators, and must be created as a [UUID](https://datatracker.ietf.org/doc/html/rfc4122) by whoever initiates the booking.  Usage of a [4 UUID](https://datatracker.ietf.org/doc/html/rfc4122#section-4.4) generation algorithm is advised.
	Id        BookingId `json:"id"`
	Passenger User      `json:"passenger"`

	// String representing the drop-off address.
	PassengerDropAddress *string `json:"passengerDropAddress,omitempty"`

	// Latitude of the passenger drop-off point.
	PassengerDropLat float64 `json:"passengerDropLat"`

	// Longitude of the passenger drop-off point.
	PassengerDropLng float64 `json:"passengerDropLng"`

	// ID of the Passenger's journey to which the booking is related (if any). Unique given the `User`'s `operator` property.
	PassengerJourneyId *string `json:"passengerJourneyId,omitempty"`

	// String representing the pickup-up address.
	PassengerPickupAddress *string `json:"passengerPickupAddress,omitempty"`

	// Passenger pickup datetime as a UNIX UTC timestamp in seconds.
	PassengerPickupDate int64 `json:"passengerPickupDate"`

	// Latitude of the passenger pick-up point.
	PassengerPickupLat float64 `json:"passengerPickupLat"`

	// Longitude of the passenger pick-up point.
	PassengerPickupLng float64 `json:"passengerPickupLng"`
	Price              Price   `json:"price"`

	// Status of the booking.
	Status BookingStatus `json:"status"`

	// URL of the booking on the webservice provider platform.
	WebUrl *string `json:"webUrl,omitempty"`
}

// Car defines model for Car.
type Car struct {
	// Brand of the car.
	Brand *string `json:"brand,omitempty"`

	// Model of the car.
	Model *string `json:"model,omitempty"`
}

// CarpoolBooking defines model for CarpoolBooking.
type CarpoolBooking struct {
	// Carpooling distance in meters. When the booking is COMPLETED or VALIDATED, this is the actual distance travelled if available.
	Distance *int `json:"distance,omitempty"`

	// Carpooling duration in seconds.
	Duration *int `json:"duration,omitempty"`

	// Unique identifier of the booking.
	Id string `json:"id"`

	// String representing the drop-off address.
	PassengerDropAddress *string `json:"passengerDropAddress,omitempty"`

	// Latitude of the passenger drop-off point.
	PassengerDropLat float64 `json:"passengerDropLat"`

	// Longitude of the passenger drop-off point.
	PassengerDropLng float64 `json:"passengerDropLng"`

	// String representing the pickup-up address.
	PassengerPickupAddress *string `json:"passengerPickupAddress,omitempty"`

	// Passenger pickup datetime as a UNIX UTC timestamp in seconds.
	PassengerPickupDate int64 `json:"passengerPickupDate"`

	// Latitude of the passenger pick-up point.
	PassengerPickupLat float64 `json:"passengerPickupLat"`

	// Longitude of the passenger pick-up point.
	PassengerPickupLng float64              `json:"passengerPickupLng"`
	Status             CarpoolBookingStatus `json:"status"`

	// URL of the booking on the webservice provider platform.
	WebUrl string `json:"webUrl"`
}

// CarpoolBookingStatus defines model for CarpoolBooking.Status.
type CarpoolBookingStatus string

// CarpoolBookingEvent defines model for CarpoolBookingEvent.
type CarpoolBookingEvent struct {
	Data interface{} `json:"data"`

	// Unique journey's id in the format of an [UUID](https://datatracker.ietf.org/doc/html/rfc4122). Usage of a [4 UUID](https://datatracker.ietf.org/doc/html/rfc4122#section-4.4) generation algorithm is advised.
	Id openapi_types.UUID `json:"id"`

	// ID token of the user retrieved using the OpenID Connect flows.
	IdToken string `json:"idToken"`
}

// DriverCarpoolBooking defines model for DriverCarpoolBooking.
type DriverCarpoolBooking struct {
	Car *Car `json:"car,omitempty"`

	// Carpooling distance in meters. When the booking is COMPLETED or VALIDATED, this is the actual distance travelled if available.
	Distance *int `json:"distance,omitempty"`
	Driver   User `json:"driver"`

	// Carpooling duration in seconds.
	Duration *int `json:"duration,omitempty"`

	// Unique identifier of the booking.
	Id string `json:"id"`

	// String representing the drop-off address.
	PassengerDropAddress *string `json:"passengerDropAddress,omitempty"`

	// Latitude of the passenger drop-off point.
	PassengerDropLat float64 `json:"passengerDropLat"`

	// Longitude of the passenger drop-off point.
	PassengerDropLng float64 `json:"passengerDropLng"`

	// String representing the pickup-up address.
	PassengerPickupAddress *string `json:"passengerPickupAddress,omitempty"`

	// Passenger pickup datetime as a UNIX UTC timestamp in seconds.
	PassengerPickupDate int64 `json:"passengerPickupDate"`

	// Latitude of the passenger pick-up point.
	PassengerPickupLat float64 `json:"passengerPickupLat"`

	// Longitude of the passenger pick-up point.
	PassengerPickupLng float64                    `json:"passengerPickupLng"`
	Price              Price                      `json:"price"`
	Status             DriverCarpoolBookingStatus `json:"status"`

	// URL of the booking on the webservice provider platform.
	WebUrl string `json:"webUrl"`
}

// DriverCarpoolBookingStatus defines model for DriverCarpoolBooking.Status.
type DriverCarpoolBookingStatus string

// DriverJourney defines model for DriverJourney.
type DriverJourney struct {
	// Available seats in the car.
	AvailableSeats *int `json:"availableSeats,omitempty"`
	Car            *Car `json:"car,omitempty"`

	// Walking distance from the requested departure location
	// to the pick-up location.
	DepartureToPickupWalkingDistance *int `json:"departureToPickupWalkingDistance,omitempty"`

	// Walking duration from the requested departure location
	// to the pick-up location.
	DepartureToPickupWalkingDuration *int `json:"departureToPickupWalkingDuration,omitempty"`

	// Walking
	// [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)
	// from the requested departure location to the pick-up location.
	DepartureToPickupWalkingPolyline *string `json:"departureToPickupWalkingPolyline,omitempty"`

	// Carpooling distance in meters.
	Distance *int `json:"distance,omitempty"`
	Driver   User `json:"driver"`

	// String representing the arrival address of the driver.
	DriverArrivalAddress *string `json:"driverArrivalAddress,omitempty"`

	// Latitude of the arrival.
	DriverArrivalLat *float64 `json:"driverArrivalLat,omitempty"`

	// Longitude of the arrival.
	DriverArrivalLng *float64 `json:"driverArrivalLng,omitempty"`

	// String representing the departure address of the driver.
	DriverDepartureAddress *string `json:"driverDepartureAddress,omitempty"`

	// Driver departure datetime as a UNIX UTC timestamp in seconds.
	DriverDepartureDate *int64 `json:"driverDepartureDate,omitempty"`

	// Latitude of the departure.
	DriverDepartureLat *float64 `json:"driverDepartureLat,omitempty"`

	// Longitude of the departure.
	DriverDepartureLng *float64 `json:"driverDepartureLng,omitempty"`

	// Walking distance to the requested arrival location
	// from the drop-off location.
	DropoffToArrivalWalkingDistance *int `json:"dropoffToArrivalWalkingDistance,omitempty"`

	// Walking duration to the requested arrival location
	// from the drop-off location.
	DropoffToArrivalWalkingDuration *int `json:"dropoffToArrivalWalkingDuration,omitempty"`

	// Walking
	// [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)
	// to the requested arrival location from the drop-off location.
	DropoffToArrivalWalkingPolyline *string `json:"dropoffToArrivalWalkingPolyline,omitempty"`

	// Carpooling duration in seconds.
	Duration int `json:"duration"`

	// Journey's id. It MUST be unique for a given operator.
	Id *string `json:"id,omitempty"`

	// Carpooling journey itinerary as a
	// [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm), compressed at  level 5.
	JourneyPolyline *string `json:"journeyPolyline,omitempty"`

	// The operator identifier. MUST be a Root Domain (example operator.org) owned by the operator or a Fully Qualified Domain Name (example carpool.mycity.com) exclusively operated by the operator. A given operator SHOULD always send the same value.
	Operator string `json:"operator"`

	// String representing the drop-off address.
	PassengerDropAddress *string `json:"passengerDropAddress,omitempty"`

	// Latitude of the passenger drop-off point.
	PassengerDropLat float64 `json:"passengerDropLat"`

	// Longitude of the passenger drop-off point.
	PassengerDropLng float64 `json:"passengerDropLng"`

	// String representing the pickup-up address.
	PassengerPickupAddress *string `json:"passengerPickupAddress,omitempty"`

	// Passenger pickup datetime as a UNIX UTC timestamp in seconds.
	PassengerPickupDate int64 `json:"passengerPickupDate"`

	// Latitude of the passenger pick-up point.
	PassengerPickupLat float64 `json:"passengerPickupLat"`

	// Longitude of the passenger pick-up point.
	PassengerPickupLng float64      `json:"passengerPickupLng"`
	Preferences        *Preferences `json:"preferences,omitempty"`
	Price              *Price       `json:"price,omitempty"`

	// Type of journey. A dynamic journey is happening in real time.
	Type DriverJourneyType `json:"type"`

	// URL of the journey on the webservice provider platform. Required to support booking by deeplink.
	WebUrl *string `json:"webUrl,omitempty"`
}

// Type of journey. A dynamic journey is happening in real time.
type DriverJourneyType string

// DriverTrip defines model for DriverTrip.
type DriverTrip struct {
	Car *Car `json:"car,omitempty"`

	// Walking distance from the requested departure location
	// to the pick-up location.
	DepartureToPickupWalkingDistance *int `json:"departureToPickupWalkingDistance,omitempty"`

	// Walking duration from the requested departure location
	// to the pick-up location.
	DepartureToPickupWalkingDuration *int `json:"departureToPickupWalkingDuration,omitempty"`

	// Walking
	// [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)
	// from the requested departure location to the pick-up location.
	DepartureToPickupWalkingPolyline *string `json:"departureToPickupWalkingPolyline,omitempty"`

	// Carpooling distance in meters.
	Distance *int `json:"distance,omitempty"`
	Driver   User `json:"driver"`

	// String representing the arrival address of the driver.
	DriverArrivalAddress *string `json:"driverArrivalAddress,omitempty"`

	// Latitude of the arrival.
	DriverArrivalLat *float64 `json:"driverArrivalLat,omitempty"`

	// Longitude of the arrival.
	DriverArrivalLng *float64 `json:"driverArrivalLng,omitempty"`

	// String representing the departure address of the driver.
	DriverDepartureAddress *string `json:"driverDepartureAddress,omitempty"`

	// Latitude of the departure.
	DriverDepartureLat *float64 `json:"driverDepartureLat,omitempty"`

	// Longitude of the departure.
	DriverDepartureLng *float64 `json:"driverDepartureLng,omitempty"`

	// Walking distance to the requested arrival location
	// from the drop-off location.
	DropoffToArrivalWalkingDistance *int `json:"dropoffToArrivalWalkingDistance,omitempty"`

	// Walking duration to the requested arrival location
	// from the drop-off location.
	DropoffToArrivalWalkingDuration *int `json:"dropoffToArrivalWalkingDuration,omitempty"`

	// Walking
	// [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)
	// to the requested arrival location from the drop-off location.
	DropoffToArrivalWalkingPolyline *string `json:"dropoffToArrivalWalkingPolyline,omitempty"`

	// Carpooling duration in seconds.
	Duration int `json:"duration"`

	// Carpooling journey itinerary as a
	// [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm), compressed at  level 5.
	JourneyPolyline *string `json:"journeyPolyline,omitempty"`

	// The operator identifier. MUST be a Root Domain (example operator.org) owned by the operator or a Fully Qualified Domain Name (example carpool.mycity.com) exclusively operated by the operator. A given operator SHOULD always send the same value.
	Operator string `json:"operator"`

	// String representing the drop-off address.
	PassengerDropAddress *string `json:"passengerDropAddress,omitempty"`

	// Latitude of the passenger drop-off point.
	PassengerDropLat float64 `json:"passengerDropLat"`

	// Longitude of the passenger drop-off point.
	PassengerDropLng float64 `json:"passengerDropLng"`

	// String representing the pickup-up address.
	PassengerPickupAddress *string `json:"passengerPickupAddress,omitempty"`

	// Latitude of the passenger pick-up point.
	PassengerPickupLat float64 `json:"passengerPickupLat"`

	// Longitude of the passenger pick-up point.
	PassengerPickupLng float64      `json:"passengerPickupLng"`
	Preferences        *Preferences `json:"preferences,omitempty"`

	// URL of the trip on the webservice provider platform.
	WebUrl *string `json:"webUrl,omitempty"`
}

// JourneySchedule defines model for JourneySchedule.
type JourneySchedule struct {
	// Driver departure datetime as a UNIX UTC timestamp in seconds.
	DriverDepartureDate *int64 `json:"driverDepartureDate,omitempty"`

	// Journey's id. It MUST be unique for a given operator.
	Id *string `json:"id,omitempty"`

	// Passenger pickup datetime as a UNIX UTC timestamp in seconds.
	PassengerPickupDate int64 `json:"passengerPickupDate"`

	// Type of journey. A dynamic journey is happening in real time.
	Type JourneyScheduleType `json:"type"`

	// URL of the journey on the webservice provider platform. Required to support booking by deeplink.
	WebUrl *string `json:"webUrl,omitempty"`
}

// Type of journey. A dynamic journey is happening in real time.
type JourneyScheduleType string

// PassengerCarpoolBooking defines model for PassengerCarpoolBooking.
type PassengerCarpoolBooking struct {
	// Carpooling distance in meters. When the booking is COMPLETED or VALIDATED, this is the actual distance travelled if available.
	Distance *int `json:"distance,omitempty"`

	// Carpooling duration in seconds.
	Duration *int `json:"duration,omitempty"`

	// Unique identifier of the booking.
	Id        string `json:"id"`
	Passenger User   `json:"passenger"`

	// String representing the drop-off address.
	PassengerDropAddress *string `json:"passengerDropAddress,omitempty"`

	// Latitude of the passenger drop-off point.
	PassengerDropLat float64 `json:"passengerDropLat"`

	// Longitude of the passenger drop-off point.
	PassengerDropLng float64 `json:"passengerDropLng"`

	// String representing the pickup-up address.
	PassengerPickupAddress *string `json:"passengerPickupAddress,omitempty"`

	// Passenger pickup datetime as a UNIX UTC timestamp in seconds.
	PassengerPickupDate int64 `json:"passengerPickupDate"`

	// Latitude of the passenger pick-up point.
	PassengerPickupLat float64 `json:"passengerPickupLat"`

	// Longitude of the passenger pick-up point.
	PassengerPickupLng float64                       `json:"passengerPickupLng"`
	Status             PassengerCarpoolBookingStatus `json:"status"`

	// URL of the booking on the webservice provider platform.
	WebUrl string `json:"webUrl"`
}

// PassengerCarpoolBookingStatus defines model for PassengerCarpoolBooking.Status.
type PassengerCarpoolBookingStatus string

// PassengerJourney defines model for PassengerJourney.
type PassengerJourney struct {
	// Carpooling distance in meters.
	Distance *int `json:"distance,omitempty"`

	// String representing the arrival address of the driver.
	DriverArrivalAddress *string `json:"driverArrivalAddress,omitempty"`

	// Latitude of the arrival.
	DriverArrivalLat *float64 `json:"driverArrivalLat,omitempty"`

	// Longitude of the arrival.
	DriverArrivalLng *float64 `json:"driverArrivalLng,omitempty"`

	// String representing the departure address of the driver.
	DriverDepartureAddress *string `json:"driverDepartureAddress,omitempty"`

	// Driver departure datetime as a UNIX UTC timestamp in seconds.
	DriverDepartureDate int64 `json:"driverDepartureDate"`

	// Latitude of the departure.
	DriverDepartureLat *float64 `json:"driverDepartureLat,omitempty"`

	// Longitude of the departure.
	DriverDepartureLng *float64 `json:"driverDepartureLng,omitempty"`

	// Carpooling duration in seconds.
	Duration int `json:"duration"`

	// Journey's id. It MUST be unique for a given operator.
	Id *string `json:"id,omitempty"`

	// Carpooling journey itinerary as a
	// [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm), compressed at  level 5.
	JourneyPolyline *string `json:"journeyPolyline,omitempty"`

	// The operator identifier. MUST be a Root Domain (example operator.org) owned by the operator or a Fully Qualified Domain Name (example carpool.mycity.com) exclusively operated by the operator. A given operator SHOULD always send the same value.
	Operator  string `json:"operator"`
	Passenger User   `json:"passenger"`

	// String representing the drop-off address.
	PassengerDropAddress *string `json:"passengerDropAddress,omitempty"`

	// Latitude of the passenger drop-off point.
	PassengerDropLat float64 `json:"passengerDropLat"`

	// Longitude of the passenger drop-off point.
	PassengerDropLng float64 `json:"passengerDropLng"`

	// String representing the pickup-up address.
	PassengerPickupAddress *string `json:"passengerPickupAddress,omitempty"`

	// Passenger pickup datetime as a UNIX UTC timestamp in seconds.
	PassengerPickupDate int64 `json:"passengerPickupDate"`

	// Latitude of the passenger pick-up point.
	PassengerPickupLat float64 `json:"passengerPickupLat"`

	// Longitude of the passenger pick-up point.
	PassengerPickupLng float64      `json:"passengerPickupLng"`
	Preferences        *Preferences `json:"preferences,omitempty"`

	// Requested seats by the passenger.
	RequestedSeats *int `json:"requestedSeats,omitempty"`

	// Type of journey. A dynamic journey is happening in real time.
	Type PassengerJourneyType `json:"type"`

	// URL of the journey on the webservice provider platform. Required to support booking by deeplink.
	WebUrl *string `json:"webUrl,omitempty"`
}

// Type of journey. A dynamic journey is happening in real time.
type PassengerJourneyType string

// PassengerTrip defines model for PassengerTrip.
type PassengerTrip struct {
	// Carpooling distance in meters.
	Distance *int `json:"distance,omitempty"`

	// String representing the arrival address of the driver.
	DriverArrivalAddress *string `json:"driverArrivalAddress,omitempty"`

	// Latitude of the arrival.
	DriverArrivalLat *float64 `json:"driverArrivalLat,omitempty"`

	// Longitude of the arrival.
	DriverArrivalLng *float64 `json:"driverArrivalLng,omitempty"`

	// String representing the departure address of the driver.
	DriverDepartureAddress *string `json:"driverDepartureAddress,omitempty"`

	// Latitude of the departure.
	DriverDepartureLat *float64 `json:"driverDepartureLat,omitempty"`

	// Longitude of the departure.
	DriverDepartureLng *float64 `json:"driverDepartureLng,omitempty"`

	// Carpooling duration in seconds.
	Duration int `json:"duration"`

	// Carpooling journey itinerary as a
	// [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm), compressed at  level 5.
	JourneyPolyline *string `json:"journeyPolyline,omitempty"`

	// The operator identifier. MUST be a Root Domain (example operator.org) owned by the operator or a Fully Qualified Domain Name (example carpool.mycity.com) exclusively operated by the operator. A given operator SHOULD always send the same value.
	Operator  string `json:"operator"`
	Passenger User   `json:"passenger"`

	// String representing the drop-off address.
	PassengerDropAddress *string `json:"passengerDropAddress,omitempty"`

	// Latitude of the passenger drop-off point.
	PassengerDropLat float64 `json:"passengerDropLat"`

	// Longitude of the passenger drop-off point.
	PassengerDropLng float64 `json:"passengerDropLng"`

	// String representing the pickup-up address.
	PassengerPickupAddress *string `json:"passengerPickupAddress,omitempty"`

	// Latitude of the passenger pick-up point.
	PassengerPickupLat float64 `json:"passengerPickupLat"`

	// Longitude of the passenger pick-up point.
	PassengerPickupLng float64      `json:"passengerPickupLng"`
	Preferences        *Preferences `json:"preferences,omitempty"`

	// URL of the trip on the webservice provider platform.
	WebUrl *string `json:"webUrl,omitempty"`
}

// Preferences defines model for Preferences.
type Preferences struct {
	// If driver journey, specifies if the driver allows animals in the car.
	Animals *bool `json:"animals,omitempty"`

	// If driver journey, specifies if the driver enjoys talking with passengers.
	IsTalker *bool `json:"isTalker,omitempty"`

	// If driver journey, specifies the size of allowed luggages.
	// From very small (1) to very big (5).
	LuggageSize *int `json:"luggageSize,omitempty"`

	// If driver journey, specifies if the driver enjoys music in the car.
	Music *bool `json:"music,omitempty"`

	// If driver journey, specifies if the driver allows smoking in the car.
	Smoking *bool `json:"smoking,omitempty"`
}

// Price defines model for Price.
type Price struct {
	// Carpooling passenger cost estimate. In the case of integrated booking by API, amount expected by the carpooling operator.
	Amount *float32 `json:"amount,omitempty"`

	// ISO 4217 code representing the currency of the price.
	Currency *string `json:"currency,omitempty"`

	// Either « FREE », « PAYING » or « UNKNOWN ». « UNKNOWN » is given
	// when it should be « PAYING » but we cannot set the price yet.
	Type *PriceType `json:"type,omitempty"`
}

// Either « FREE », « PAYING » or « UNKNOWN ». « UNKNOWN » is given
// when it should be « PAYING » but we cannot set the price yet.
type PriceType string

// Schedule defines model for Schedule.
type Schedule struct {
	JourneySchedules *[]JourneySchedule `json:"journeySchedules,omitempty"`

	// Day of week of the passenger pick-up.
	PassengerPickupDay *SchedulePassengerPickupDay `json:"passengerPickupDay,omitempty"`

	// Passenger pick-up time of day represented as
	// [RFC3339 partial-time](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).
	PassengerPickupTimeOfDay *string `json:"passengerPickupTimeOfDay,omitempty"`
}

// Day of week of the passenger pick-up.
type SchedulePassengerPickupDay string

// Trip defines model for Trip.
type Trip struct {
	// Carpooling distance in meters.
	Distance *int `json:"distance,omitempty"`

	// String representing the arrival address of the driver.
	DriverArrivalAddress *string `json:"driverArrivalAddress,omitempty"`

	// Latitude of the arrival.
	DriverArrivalLat *float64 `json:"driverArrivalLat,omitempty"`

	// Longitude of the arrival.
	DriverArrivalLng *float64 `json:"driverArrivalLng,omitempty"`

	// String representing the departure address of the driver.
	DriverDepartureAddress *string `json:"driverDepartureAddress,omitempty"`

	// Latitude of the departure.
	DriverDepartureLat *float64 `json:"driverDepartureLat,omitempty"`

	// Longitude of the departure.
	DriverDepartureLng *float64 `json:"driverDepartureLng,omitempty"`

	// Carpooling duration in seconds.
	Duration int `json:"duration"`

	// Carpooling journey itinerary as a
	// [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm), compressed at  level 5.
	JourneyPolyline *string `json:"journeyPolyline,omitempty"`

	// The operator identifier. MUST be a Root Domain (example operator.org) owned by the operator or a Fully Qualified Domain Name (example carpool.mycity.com) exclusively operated by the operator. A given operator SHOULD always send the same value.
	Operator string `json:"operator"`

	// String representing the drop-off address.
	PassengerDropAddress *string `json:"passengerDropAddress,omitempty"`

	// Latitude of the passenger drop-off point.
	PassengerDropLat float64 `json:"passengerDropLat"`

	// Longitude of the passenger drop-off point.
	PassengerDropLng float64 `json:"passengerDropLng"`

	// String representing the pickup-up address.
	PassengerPickupAddress *string `json:"passengerPickupAddress,omitempty"`

	// Latitude of the passenger pick-up point.
	PassengerPickupLat float64 `json:"passengerPickupLat"`

	// Longitude of the passenger pick-up point.
	PassengerPickupLng float64      `json:"passengerPickupLng"`
	Preferences        *Preferences `json:"preferences,omitempty"`

	// URL of the trip on the webservice provider platform.
	WebUrl *string `json:"webUrl,omitempty"`
}

// User defines model for User.
type User struct {
	// User's alias.
	Alias string `json:"alias"`

	// User's first name.
	FirstName *string `json:"firstName,omitempty"`

	// User's gender. 'O' stands for 'Other'.
	Gender *UserGender `json:"gender,omitempty"`

	// User's grade from 1 to 5.
	Grade *int `json:"grade,omitempty"`

	// User's identifier. It MUST be unique for a given `operator`.
	Id string `json:"id"`

	// User's last name.
	LastName *string `json:"lastName,omitempty"`

	// The operator identifier. MUST be a Fully Qualified Domain Name (example carpool.mycity.com) owned by the operator or a Partially Qualified Domain Name (example operator.org) owned and exclusively operated by the operator. Operators SHOULD always send the same value.
	Operator string `json:"operator"`

	// User's profile picture absolute URL.
	Picture *string `json:"picture,omitempty"`

	// true if the identity of this user has been verified by the operator or a third party; and the firstName, lastName, birthdate have been confirmed as identitical to an official identity proof document. Can be left empty if the information is not available.
	VerifiedIdentity *bool `json:"verifiedIdentity,omitempty"`
}

// User's gender. 'O' stands for 'Other'.
type UserGender string

// Booking id is common between both operators, and must be created as a [UUID](https://datatracker.ietf.org/doc/html/rfc4122) by whoever initiates the booking.  Usage of a [4 UUID](https://datatracker.ietf.org/doc/html/rfc4122#section-4.4) generation algorithm is advised.
type BookingId = openapi_types.UUID

// Status of the booking.
type BookingStatus string

// ArrivalLat defines model for arrivalLat.
type ArrivalLat = float32

// ArrivalLng defines model for arrivalLng.
type ArrivalLng = float32

// ArrivalRadius defines model for arrivalRadius.
type ArrivalRadius = float32

// Count defines model for count.
type Count = int

// DepartureDate defines model for departureDate.
type DepartureDate = int

// DepartureLat defines model for departureLat.
type DepartureLat = float32

// DepartureLng defines model for departureLng.
type DepartureLng = float32

// DepartureRadius defines model for departureRadius.
type DepartureRadius = float32

// DepartureTimeOfDay defines model for departureTimeOfDay.
type DepartureTimeOfDay = string

// DepartureWeekdays defines model for departureWeekdays.
type DepartureWeekdays = []string

// MaxDepartureDate defines model for maxDepartureDate.
type MaxDepartureDate = int

// MinDepartureDate defines model for minDepartureDate.
type MinDepartureDate = int

// TimeDelta defines model for timeDelta.
type TimeDelta = int

// BadRequest defines model for BadRequest.
type BadRequest struct {
	// Explain why the request couldn't be processed.
	Error *string `json:"error,omitempty"`
}

// PostBookingEventsJSONBody defines parameters for PostBookingEvents.
type PostBookingEventsJSONBody = CarpoolBookingEvent

// PostBookingsJSONBody defines parameters for PostBookings.
type PostBookingsJSONBody = Booking

// PatchBookingsParams defines parameters for PatchBookings.
type PatchBookingsParams struct {
	// New status of the Booking.
	Status BookingStatus `form:"status" json:"status"`

	// Free text content of a message. The message can contain explanations on the status change.
	Message *string `form:"message,omitempty" json:"message,omitempty"`
}

// GetDriverJourneysParams defines parameters for GetDriverJourneys.
type GetDriverJourneysParams struct {
	// Latitude of searched departure point.
	DepartureLat DepartureLat `form:"departureLat" json:"departureLat"`

	// Longitude of searched departure point.
	DepartureLng DepartureLng `form:"departureLng" json:"departureLng"`

	// Latitude of searched arrival point.
	ArrivalLat ArrivalLat `form:"arrivalLat" json:"arrivalLat"`

	// Longitude of searched arrival point.
	ArrivalLng ArrivalLng `form:"arrivalLng" json:"arrivalLng"`

	// Departure datetime using a UNIX UTC timestamp in seconds.
	DepartureDate DepartureDate `form:"departureDate" json:"departureDate"`

	// Time margin in seconds. The retrieved journeys must match the given time parameters within a +`timeDelta` / -`timeDelta` interval .
	TimeDelta *TimeDelta `form:"timeDelta,omitempty" json:"timeDelta,omitempty"`

	// Search radius in kilometers around the departure point.
	DepartureRadius *DepartureRadius `form:"departureRadius,omitempty" json:"departureRadius,omitempty"`

	// Search radius in kilometers around the arrival point.
	ArrivalRadius *ArrivalRadius `form:"arrivalRadius,omitempty" json:"arrivalRadius,omitempty"`

	// Maximum number of returned results. If missing, all matching results are returned.
	Count *Count `form:"count,omitempty" json:"count,omitempty"`
}

// GetDriverRegularTripsParams defines parameters for GetDriverRegularTrips.
type GetDriverRegularTripsParams struct {
	// Latitude of searched departure point.
	DepartureLat DepartureLat `form:"departureLat" json:"departureLat"`

	// Longitude of searched departure point.
	DepartureLng DepartureLng `form:"departureLng" json:"departureLng"`

	// Latitude of searched arrival point.
	ArrivalLat ArrivalLat `form:"arrivalLat" json:"arrivalLat"`

	// Longitude of searched arrival point.
	ArrivalLng ArrivalLng `form:"arrivalLng" json:"arrivalLng"`

	// Departure time of day represented as [RFC3339 partial-time](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).
	DepartureTimeOfDay DepartureTimeOfDay `form:"departureTimeOfDay" json:"departureTimeOfDay"`

	// Departure days of week. The retrieved trips should have at least one schedule applicable on one of the departureWeekdays.
	DepartureWeekdays *DepartureWeekdays `form:"departureWeekdays,omitempty" json:"departureWeekdays,omitempty"`

	// Time margin in seconds. The retrieved journeys must match the given time parameters within a +`timeDelta` / -`timeDelta` interval .
	TimeDelta *TimeDelta `form:"timeDelta,omitempty" json:"timeDelta,omitempty"`

	// Search radius in kilometers around the departure point.
	DepartureRadius *DepartureRadius `form:"departureRadius,omitempty" json:"departureRadius,omitempty"`

	// Search radius in kilometers around the arrival point.
	ArrivalRadius *ArrivalRadius `form:"arrivalRadius,omitempty" json:"arrivalRadius,omitempty"`

	// Minimum date of departure for the returned journeys. Datetime using a UNIX UTC timestamp in seconds.
	MinDepartureDate *MinDepartureDate `form:"minDepartureDate,omitempty" json:"minDepartureDate,omitempty"`

	// Maximum date of departure for the returned journeys. Datetime using a UNIX UTC timestamp in seconds.
	MaxDepartureDate *MaxDepartureDate `form:"maxDepartureDate,omitempty" json:"maxDepartureDate,omitempty"`

	// Maximum number of returned results. If missing, all matching results are returned.
	Count *Count `form:"count,omitempty" json:"count,omitempty"`
}

// PostConnectionsJSONBody defines parameters for PostConnections.
type PostConnectionsJSONBody struct {
	// Booking id is common between both operators, and must be created as a [UUID](https://datatracker.ietf.org/doc/html/rfc4122) by whoever initiates the booking.  Usage of a [4 UUID](https://datatracker.ietf.org/doc/html/rfc4122#section-4.4) generation algorithm is advised.
	BookingId *BookingId `json:"bookingId,omitempty"`

	// ID of the Driver's journey to which the message is related (if any). Unique given the `Driver`'s `operator` property.
	DriverJourneyId *string `json:"driverJourneyId,omitempty"`
	From            User    `json:"from"`

	// Free text content of a message. The message can contain all the details (phone number, email, etc.) allowing the recipient to call back the sender in order to carpool with him/her.
	Message string `json:"message"`

	// ID of the Passenger's journey to which the message is related (if any). Unique given the `Passenger`'s `operator` property.
	PassengerJourneyId *string `json:"passengerJourneyId,omitempty"`

	// Defines if the recipient of this message is either the driver or the passenger.
	RecipientCarpoolerType PostConnectionsJSONBodyRecipientCarpoolerType `json:"recipientCarpoolerType"`
	To                     User                                          `json:"to"`
}

// PostConnectionsJSONBodyRecipientCarpoolerType defines parameters for PostConnections.
type PostConnectionsJSONBodyRecipientCarpoolerType string

// GetPassengerJourneysParams defines parameters for GetPassengerJourneys.
type GetPassengerJourneysParams struct {
	// Latitude of searched departure point.
	DepartureLat DepartureLat `form:"departureLat" json:"departureLat"`

	// Longitude of searched departure point.
	DepartureLng DepartureLng `form:"departureLng" json:"departureLng"`

	// Latitude of searched arrival point.
	ArrivalLat ArrivalLat `form:"arrivalLat" json:"arrivalLat"`

	// Longitude of searched arrival point.
	ArrivalLng ArrivalLng `form:"arrivalLng" json:"arrivalLng"`

	// Departure datetime using a UNIX UTC timestamp in seconds.
	DepartureDate DepartureDate `form:"departureDate" json:"departureDate"`

	// Time margin in seconds. The retrieved journeys must match the given time parameters within a +`timeDelta` / -`timeDelta` interval .
	TimeDelta *TimeDelta `form:"timeDelta,omitempty" json:"timeDelta,omitempty"`

	// Search radius in kilometers around the departure point.
	DepartureRadius *DepartureRadius `form:"departureRadius,omitempty" json:"departureRadius,omitempty"`

	// Search radius in kilometers around the arrival point.
	ArrivalRadius *ArrivalRadius `form:"arrivalRadius,omitempty" json:"arrivalRadius,omitempty"`

	// Maximum number of returned results. If missing, all matching results are returned.
	Count *Count `form:"count,omitempty" json:"count,omitempty"`
}

// GetPassengerRegularTripsParams defines parameters for GetPassengerRegularTrips.
type GetPassengerRegularTripsParams struct {
	// Latitude of searched departure point.
	DepartureLat DepartureLat `form:"departureLat" json:"departureLat"`

	// Longitude of searched departure point.
	DepartureLng DepartureLng `form:"departureLng" json:"departureLng"`

	// Latitude of searched arrival point.
	ArrivalLat ArrivalLat `form:"arrivalLat" json:"arrivalLat"`

	// Longitude of searched arrival point.
	ArrivalLng ArrivalLng `form:"arrivalLng" json:"arrivalLng"`

	// Departure time of day represented as [RFC3339 partial-time](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).
	DepartureTimeOfDay DepartureTimeOfDay `form:"departureTimeOfDay" json:"departureTimeOfDay"`

	// Departure days of week. The retrieved trips should have at least one schedule applicable on one of the departureWeekdays.
	DepartureWeekdays *DepartureWeekdays `form:"departureWeekdays,omitempty" json:"departureWeekdays,omitempty"`

	// Time margin in seconds. The retrieved journeys must match the given time parameters within a +`timeDelta` / -`timeDelta` interval .
	TimeDelta *TimeDelta `form:"timeDelta,omitempty" json:"timeDelta,omitempty"`

	// Search radius in kilometers around the departure point.
	DepartureRadius *DepartureRadius `form:"departureRadius,omitempty" json:"departureRadius,omitempty"`

	// Search radius in kilometers around the arrival point.
	ArrivalRadius *ArrivalRadius `form:"arrivalRadius,omitempty" json:"arrivalRadius,omitempty"`

	// Minimum date of departure for the returned journeys. Datetime using a UNIX UTC timestamp in seconds.
	MinDepartureDate *MinDepartureDate `form:"minDepartureDate,omitempty" json:"minDepartureDate,omitempty"`

	// Maximum date of departure for the returned journeys. Datetime using a UNIX UTC timestamp in seconds.
	MaxDepartureDate *MaxDepartureDate `form:"maxDepartureDate,omitempty" json:"maxDepartureDate,omitempty"`

	// Maximum number of returned results. If missing, all matching results are returned.
	Count *Count `form:"count,omitempty" json:"count,omitempty"`
}

// PostBookingEventsJSONRequestBody defines body for PostBookingEvents for application/json ContentType.
type PostBookingEventsJSONRequestBody = PostBookingEventsJSONBody

// PostBookingsJSONRequestBody defines body for PostBookings for application/json ContentType.
type PostBookingsJSONRequestBody = PostBookingsJSONBody

// PostConnectionsJSONRequestBody defines body for PostConnections for application/json ContentType.
type PostConnectionsJSONRequestBody PostConnectionsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Sends booking information of a user connected with a third-party provider back to the provider.
	// (POST /booking_events)
	PostBookingEvents(ctx echo.Context) error
	// Create a punctual outward Booking request.
	// (POST /bookings)
	PostBookings(ctx echo.Context) error
	// Retrieves an existing Booking request.
	// (GET /bookings/{bookingId})
	GetBookings(ctx echo.Context, bookingId BookingId) error
	// Updates status of an existing Booking request.
	// (PATCH /bookings/{bookingId})
	PatchBookings(ctx echo.Context, bookingId BookingId, params PatchBookingsParams) error
	// Search for matching punctual planned outward driver journeys.
	// (GET /driver_journeys)
	GetDriverJourneys(ctx echo.Context, params GetDriverJourneysParams) error
	// Search for matching regular driver trips.
	// (GET /driver_regular_trips)
	GetDriverRegularTrips(ctx echo.Context, params GetDriverRegularTripsParams) error
	// Send a message to the owner of a retrieved journey.
	// (POST /messages)
	PostConnections(ctx echo.Context) error
	// Search for matching punctual planned outward passenger journeys.
	// (GET /passenger_journeys)
	GetPassengerJourneys(ctx echo.Context, params GetPassengerJourneysParams) error
	// Search for matching passenger regular trips.
	// (GET /passenger_regular_trips)
	GetPassengerRegularTrips(ctx echo.Context, params GetPassengerRegularTripsParams) error
	// Give health status of the webservice.
	// (GET /status)
	GetStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostBookingEvents converts echo context to params.
func (w *ServerInterfaceWrapper) PostBookingEvents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBookingEvents(ctx)
	return err
}

// PostBookings converts echo context to params.
func (w *ServerInterfaceWrapper) PostBookings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBookings(ctx)
	return err
}

// GetBookings converts echo context to params.
func (w *ServerInterfaceWrapper) GetBookings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bookingId" -------------
	var bookingId BookingId

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookingId", runtime.ParamLocationPath, ctx.Param("bookingId"), &bookingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bookingId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBookings(ctx, bookingId)
	return err
}

// PatchBookings converts echo context to params.
func (w *ServerInterfaceWrapper) PatchBookings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bookingId" -------------
	var bookingId BookingId

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookingId", runtime.ParamLocationPath, ctx.Param("bookingId"), &bookingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bookingId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchBookingsParams
	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "message" -------------

	err = runtime.BindQueryParameter("form", true, false, "message", ctx.QueryParams(), &params.Message)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchBookings(ctx, bookingId, params)
	return err
}

// GetDriverJourneys converts echo context to params.
func (w *ServerInterfaceWrapper) GetDriverJourneys(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDriverJourneysParams
	// ------------- Required query parameter "departureLat" -------------

	err = runtime.BindQueryParameter("form", true, true, "departureLat", ctx.QueryParams(), &params.DepartureLat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureLat: %s", err))
	}

	// ------------- Required query parameter "departureLng" -------------

	err = runtime.BindQueryParameter("form", true, true, "departureLng", ctx.QueryParams(), &params.DepartureLng)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureLng: %s", err))
	}

	// ------------- Required query parameter "arrivalLat" -------------

	err = runtime.BindQueryParameter("form", true, true, "arrivalLat", ctx.QueryParams(), &params.ArrivalLat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arrivalLat: %s", err))
	}

	// ------------- Required query parameter "arrivalLng" -------------

	err = runtime.BindQueryParameter("form", true, true, "arrivalLng", ctx.QueryParams(), &params.ArrivalLng)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arrivalLng: %s", err))
	}

	// ------------- Required query parameter "departureDate" -------------

	err = runtime.BindQueryParameter("form", true, true, "departureDate", ctx.QueryParams(), &params.DepartureDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureDate: %s", err))
	}

	// ------------- Optional query parameter "timeDelta" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeDelta", ctx.QueryParams(), &params.TimeDelta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeDelta: %s", err))
	}

	// ------------- Optional query parameter "departureRadius" -------------

	err = runtime.BindQueryParameter("form", true, false, "departureRadius", ctx.QueryParams(), &params.DepartureRadius)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureRadius: %s", err))
	}

	// ------------- Optional query parameter "arrivalRadius" -------------

	err = runtime.BindQueryParameter("form", true, false, "arrivalRadius", ctx.QueryParams(), &params.ArrivalRadius)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arrivalRadius: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDriverJourneys(ctx, params)
	return err
}

// GetDriverRegularTrips converts echo context to params.
func (w *ServerInterfaceWrapper) GetDriverRegularTrips(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDriverRegularTripsParams
	// ------------- Required query parameter "departureLat" -------------

	err = runtime.BindQueryParameter("form", true, true, "departureLat", ctx.QueryParams(), &params.DepartureLat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureLat: %s", err))
	}

	// ------------- Required query parameter "departureLng" -------------

	err = runtime.BindQueryParameter("form", true, true, "departureLng", ctx.QueryParams(), &params.DepartureLng)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureLng: %s", err))
	}

	// ------------- Required query parameter "arrivalLat" -------------

	err = runtime.BindQueryParameter("form", true, true, "arrivalLat", ctx.QueryParams(), &params.ArrivalLat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arrivalLat: %s", err))
	}

	// ------------- Required query parameter "arrivalLng" -------------

	err = runtime.BindQueryParameter("form", true, true, "arrivalLng", ctx.QueryParams(), &params.ArrivalLng)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arrivalLng: %s", err))
	}

	// ------------- Required query parameter "departureTimeOfDay" -------------

	err = runtime.BindQueryParameter("form", true, true, "departureTimeOfDay", ctx.QueryParams(), &params.DepartureTimeOfDay)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureTimeOfDay: %s", err))
	}

	// ------------- Optional query parameter "departureWeekdays" -------------

	err = runtime.BindQueryParameter("form", false, false, "departureWeekdays", ctx.QueryParams(), &params.DepartureWeekdays)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureWeekdays: %s", err))
	}

	// ------------- Optional query parameter "timeDelta" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeDelta", ctx.QueryParams(), &params.TimeDelta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeDelta: %s", err))
	}

	// ------------- Optional query parameter "departureRadius" -------------

	err = runtime.BindQueryParameter("form", true, false, "departureRadius", ctx.QueryParams(), &params.DepartureRadius)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureRadius: %s", err))
	}

	// ------------- Optional query parameter "arrivalRadius" -------------

	err = runtime.BindQueryParameter("form", true, false, "arrivalRadius", ctx.QueryParams(), &params.ArrivalRadius)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arrivalRadius: %s", err))
	}

	// ------------- Optional query parameter "minDepartureDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "minDepartureDate", ctx.QueryParams(), &params.MinDepartureDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter minDepartureDate: %s", err))
	}

	// ------------- Optional query parameter "maxDepartureDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxDepartureDate", ctx.QueryParams(), &params.MaxDepartureDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter maxDepartureDate: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDriverRegularTrips(ctx, params)
	return err
}

// PostConnections converts echo context to params.
func (w *ServerInterfaceWrapper) PostConnections(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostConnections(ctx)
	return err
}

// GetPassengerJourneys converts echo context to params.
func (w *ServerInterfaceWrapper) GetPassengerJourneys(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPassengerJourneysParams
	// ------------- Required query parameter "departureLat" -------------

	err = runtime.BindQueryParameter("form", true, true, "departureLat", ctx.QueryParams(), &params.DepartureLat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureLat: %s", err))
	}

	// ------------- Required query parameter "departureLng" -------------

	err = runtime.BindQueryParameter("form", true, true, "departureLng", ctx.QueryParams(), &params.DepartureLng)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureLng: %s", err))
	}

	// ------------- Required query parameter "arrivalLat" -------------

	err = runtime.BindQueryParameter("form", true, true, "arrivalLat", ctx.QueryParams(), &params.ArrivalLat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arrivalLat: %s", err))
	}

	// ------------- Required query parameter "arrivalLng" -------------

	err = runtime.BindQueryParameter("form", true, true, "arrivalLng", ctx.QueryParams(), &params.ArrivalLng)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arrivalLng: %s", err))
	}

	// ------------- Required query parameter "departureDate" -------------

	err = runtime.BindQueryParameter("form", true, true, "departureDate", ctx.QueryParams(), &params.DepartureDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureDate: %s", err))
	}

	// ------------- Optional query parameter "timeDelta" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeDelta", ctx.QueryParams(), &params.TimeDelta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeDelta: %s", err))
	}

	// ------------- Optional query parameter "departureRadius" -------------

	err = runtime.BindQueryParameter("form", true, false, "departureRadius", ctx.QueryParams(), &params.DepartureRadius)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureRadius: %s", err))
	}

	// ------------- Optional query parameter "arrivalRadius" -------------

	err = runtime.BindQueryParameter("form", true, false, "arrivalRadius", ctx.QueryParams(), &params.ArrivalRadius)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arrivalRadius: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPassengerJourneys(ctx, params)
	return err
}

// GetPassengerRegularTrips converts echo context to params.
func (w *ServerInterfaceWrapper) GetPassengerRegularTrips(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPassengerRegularTripsParams
	// ------------- Required query parameter "departureLat" -------------

	err = runtime.BindQueryParameter("form", true, true, "departureLat", ctx.QueryParams(), &params.DepartureLat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureLat: %s", err))
	}

	// ------------- Required query parameter "departureLng" -------------

	err = runtime.BindQueryParameter("form", true, true, "departureLng", ctx.QueryParams(), &params.DepartureLng)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureLng: %s", err))
	}

	// ------------- Required query parameter "arrivalLat" -------------

	err = runtime.BindQueryParameter("form", true, true, "arrivalLat", ctx.QueryParams(), &params.ArrivalLat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arrivalLat: %s", err))
	}

	// ------------- Required query parameter "arrivalLng" -------------

	err = runtime.BindQueryParameter("form", true, true, "arrivalLng", ctx.QueryParams(), &params.ArrivalLng)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arrivalLng: %s", err))
	}

	// ------------- Required query parameter "departureTimeOfDay" -------------

	err = runtime.BindQueryParameter("form", true, true, "departureTimeOfDay", ctx.QueryParams(), &params.DepartureTimeOfDay)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureTimeOfDay: %s", err))
	}

	// ------------- Optional query parameter "departureWeekdays" -------------

	err = runtime.BindQueryParameter("form", false, false, "departureWeekdays", ctx.QueryParams(), &params.DepartureWeekdays)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureWeekdays: %s", err))
	}

	// ------------- Optional query parameter "timeDelta" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeDelta", ctx.QueryParams(), &params.TimeDelta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeDelta: %s", err))
	}

	// ------------- Optional query parameter "departureRadius" -------------

	err = runtime.BindQueryParameter("form", true, false, "departureRadius", ctx.QueryParams(), &params.DepartureRadius)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departureRadius: %s", err))
	}

	// ------------- Optional query parameter "arrivalRadius" -------------

	err = runtime.BindQueryParameter("form", true, false, "arrivalRadius", ctx.QueryParams(), &params.ArrivalRadius)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arrivalRadius: %s", err))
	}

	// ------------- Optional query parameter "minDepartureDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "minDepartureDate", ctx.QueryParams(), &params.MinDepartureDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter minDepartureDate: %s", err))
	}

	// ------------- Optional query parameter "maxDepartureDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxDepartureDate", ctx.QueryParams(), &params.MaxDepartureDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter maxDepartureDate: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPassengerRegularTrips(ctx, params)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/booking_events", wrapper.PostBookingEvents)
	router.POST(baseURL+"/bookings", wrapper.PostBookings)
	router.GET(baseURL+"/bookings/:bookingId", wrapper.GetBookings)
	router.PATCH(baseURL+"/bookings/:bookingId", wrapper.PatchBookings)
	router.GET(baseURL+"/driver_journeys", wrapper.GetDriverJourneys)
	router.GET(baseURL+"/driver_regular_trips", wrapper.GetDriverRegularTrips)
	router.POST(baseURL+"/messages", wrapper.PostConnections)
	router.GET(baseURL+"/passenger_journeys", wrapper.GetPassengerJourneys)
	router.GET(baseURL+"/passenger_regular_trips", wrapper.GetPassengerRegularTrips)
	router.GET(baseURL+"/status", wrapper.GetStatus)
}
